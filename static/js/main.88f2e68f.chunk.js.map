{"version":3,"sources":["components/common/Boton/Boton.tsx","components/common/Menu/MenuHorizontal.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["typeBoton","MenuHorizontal","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","auxRef","React","createRef","state","fixedTop","setFixedFromOffset","window","onscroll","offset","nextState","document","documentElement","scrollTop","setState","inherits","createClass","key","value","console","log","react_default","a","createElement","Navbar","bg","variant","expand","fixed","undefined","Brand","href","Toggle","aria-controls","Collapse","Nav","className","Link","Component","Boton","Button","onClick","e","type","children","App","rfMenu","id","Boton_Boton","outlight","scrollTo","behavior","top","getElementsByClassName","offsetTop","MenuHorizontal_MenuHorizontal","header","getElementById","offsetHeight","title","style","backgroundColor","color","role","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kLAIYA,2GCOCC,EAAb,SAAAC,GAMI,SAAAD,EAAYE,GAA4B,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACpCG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KALVQ,OAASC,IAAMC,YAIyBT,EAHxCU,MAAyB,CACrBC,UAAU,GAIPX,EAAKD,MAAMa,qBAEVC,OAAOC,SAAW,WACd,IAAIC,EAASf,EAAKD,MAAMa,qBACxB,GAAGG,EAAO,CACN,IAAIC,EAAYC,SAASC,gBAAgBC,UAAYJ,EAClDC,GAAahB,EAAKU,MAAMC,UAEvBX,EAAKoB,SAAS,CAACT,SAASK,OAVJhB,EAN5C,OAAAC,OAAAoB,EAAA,EAAApB,CAAAJ,EAAAC,GAAAG,OAAAqB,EAAA,EAAArB,CAAAJ,EAAA,EAAA0B,IAAA,SAAAC,MAAA,WA2BQ,OADAC,QAAQC,IAAI,WACJC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,QAAQ,QAAQC,OAAO,KAAKC,MAAO/B,KAAKO,MAAMC,SAAS,WAAMwB,GACxER,EAAAC,EAAAC,cAACC,EAAA,EAAOM,MAAR,CAAcC,KAAK,SAAnB,aACAV,EAAAC,EAAAC,cAACC,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,0BAC7BZ,EAAAC,EAAAC,cAACC,EAAA,EAAOU,SAAR,KACIb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAKC,UAAU,WACff,EAAAC,EAAAC,cAACY,EAAA,EAAIE,KAAL,CAAUN,KAAK,SAAf,QACAV,EAAAC,EAAAC,cAACY,EAAA,EAAIE,KAAL,CAAUN,KAAK,aAAf,YACAV,EAAAC,EAAAC,cAACY,EAAA,EAAIE,KAAL,CAAUN,KAAK,YAAf,kBAlC5BxC,EAAA,CAAoCW,IAAMoC,6BDP9BhD,wDAUL,IAAMiD,EAAQ,SAAC9C,GAClB,OAAO4B,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAQC,QAAS,SAACC,GAASjD,EAAMgD,QAAQC,IAAKhB,QAASjC,EAAMkD,MAAOlD,EAAMmD,WEiDtEC,6MAxDbC,OAAS5C,IAAMC,oFAIb,OACEkB,EAAAC,EAAAC,cAAA,OAAKa,UAAU,OACbf,EAAAC,EAAAC,cAAA,UAAQwB,GAAG,SAASX,UAAU,qBAA9B,YAEAf,EAAAC,EAAAC,cAACyB,EAAD,CAAOL,KAAMrD,EAAU2D,SAAUR,QAAS,WAExClC,OAAO2C,SACL,CACEC,SAAY,SACZC,IAAQzC,SAAS0C,uBAAuB,UAAU,GAAmBC,cAL3E,aAUEjC,EAAAC,EAAAC,cAACgC,EAAD,CAAgBjD,mBAAsB,WAClC,IAAIkD,EAAS7C,SAAS8C,eAAe,UACrC,OAAOD,EAAOA,EAAOE,aAAa,QAExCrC,EAAAC,EAAAC,cAAA,OAAKa,UAAU,UACbf,EAAAC,EAAAC,cAAA,OAAKa,UAAU,UACff,EAAAC,EAAAC,cAAA,+BACIF,EAAAC,EAAAC,cAAA,mCAA0BF,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,KAAR,sBAA1B,kJACAV,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,yEACHF,EAAAC,EAAAC,cAAA,6BAAoBF,EAAAC,EAAAC,cAAA,uCAApB,KACAF,EAAAC,EAAAC,cAAA,6BAAoBF,EAAAC,EAAAC,cAAA,yCAApB,KACAF,EAAAC,EAAAC,cAAA,qDAA4CF,EAAAC,EAAAC,cAAA,QAAMoC,MAAM,aAAZ,QAA5C,MAEJtC,EAAAC,EAAAC,cAAA,OAAKa,UAAU,mBAAmBwB,MAAO,CAACC,gBAAiB,OAAQC,MAAM,SAErEzC,EAAAC,EAAAC,cAAA,MAAIa,UAAU,aAAd,iBACAf,EAAAC,EAAAC,cAAA,KAAGa,UAAU,QAAb,kIACAf,EAAAC,EAAAC,cAAA,MAAIa,UAAU,SACdf,EAAAC,EAAAC,cAAA,iHACAF,EAAAC,EAAAC,cAAA,KAAGa,UAAU,QACXf,EAAAC,EAAAC,cAAA,KAAGa,UAAU,yBAAyBL,KAAK,IAAIgC,KAAK,UAApD,gBAIN1C,EAAAC,EAAAC,cAAA,OAAKa,UAAU,UACff,EAAAC,EAAAC,cAAA,+BACIF,EAAAC,EAAAC,cAAA,mCAA0BF,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,KAAR,sBAA1B,kJACAV,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,yEACHF,EAAAC,EAAAC,cAAA,6BAAoBF,EAAAC,EAAAC,cAAA,uCAApB,KACAF,EAAAC,EAAAC,cAAA,6BAAoBF,EAAAC,EAAAC,cAAA,yCAApB,KACAF,EAAAC,EAAAC,cAAA,qDAA4CF,EAAAC,EAAAC,cAAA,QAAMoC,MAAM,aAAZ,QAA5C,eAlDIrB,aCME0B,QACW,cAA7BzD,OAAO0D,SAASC,UAEe,UAA7B3D,OAAO0D,SAASC,UAEhB3D,OAAO0D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAAS3D,SAAS8C,eAAe,SDmI3C,kBAAmBc,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.88f2e68f.chunk.js","sourcesContent":["import React, { PropsWithChildren } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport {TPropBase} from \"../../../clases\"\r\n\r\nexport enum typeBoton {\r\n    link= \"link\",\r\n    outlight= \"outline-light\"\r\n}\r\n\r\nexport interface IBotonModel{\r\n    type?: typeBoton\r\n    onClick:(event: MouseEvent) => void\r\n}\r\n\r\nexport const Boton = (props: TPropBase<IBotonModel>)=>{\r\n    return <Button onClick={(e:any)=>{props.onClick(e)}} variant={props.type}>{props.children}</Button>;\r\n}","import React, { PropsWithChildren, RefObject } from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\n\r\nexport interface IMenuHorizontalModel{\r\n    setFixedFromOffset?:()=>number | null;\r\n}\r\n\r\ninterface IState{\r\n    fixedTop:boolean;\r\n}\r\n\r\nexport class MenuHorizontal extends React.Component<IMenuHorizontalModel, IState>{\r\n\r\n    auxRef = React.createRef<HTMLDivElement>();\r\n    state:Readonly<IState> = {\r\n        fixedTop: false\r\n    }\r\n    constructor(props:IMenuHorizontalModel) {\r\n        super(props);\r\n        if(this.props.setFixedFromOffset)\r\n        {\r\n            window.onscroll = () => {\r\n                let offset = this.props.setFixedFromOffset!();\r\n                if(offset){\r\n                    let nextState = document.documentElement.scrollTop > offset;\r\n                    if(nextState != this.state.fixedTop)\r\n                    {\r\n                        this.setState({fixedTop:nextState});\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    render()\r\n    {\r\n        console.log(\"refresh\");\r\n        return  <Navbar bg=\"light\" variant=\"light\" expand=\"md\" fixed={this.state.fixedTop?\"top\":undefined}>\r\n                        <Navbar.Brand href=\"#home\">Muxo Code</Navbar.Brand>\r\n                        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                        <Navbar.Collapse>\r\n                            <Nav className=\"mr-auto\">\r\n                            <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                            <Nav.Link href=\"#features\">Features</Nav.Link>\r\n                            <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\r\n                            </Nav>\r\n                        </Navbar.Collapse>\r\n                    </Navbar>                \r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {MenuHorizontal} from \"./components/common/Menu\"\nimport { Boton, typeBoton } from './components/common/Boton/Boton';\n\nclass App extends Component {\n\n  rfMenu = React.createRef<HTMLElement>();\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <header id=\"header\" className=\"App-header expand\">\n        Muxo Code\n        <Boton type={typeBoton.outlight} onClick={()=>{\n          debugger;\n          window.scrollTo(\n            {\n              'behavior': 'smooth',\n              'top': (document.getElementsByClassName(\"cuerpo\")[0] as HTMLElement).offsetTop\n            }\n          );\n        }}>Lets Go!</Boton>\n        </header>\n          <MenuHorizontal setFixedFromOffset = {()=>{\n              let header = document.getElementById(\"header\");\n              return header?header.offsetHeight:null;\n           }}/>\n        <div className=\"cuerpo\">\n          <div className=\"expand\">\n          <h2>Example body text</h2>\n              <p>Nullam quis risus eget <a href=\"#\">urna mollis ornare</a> vel eu leo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nullam id dolor id nibh ultricies vehicula.</p>\n              <p><small>This line of text is meant to be treated as fine print.</small></p>\n              <p>The following is <strong>rendered as bold text</strong>.</p>\n              <p>The following is <em>rendered as italicized text</em>.</p>\n              <p>An abbreviation of the word attribute is <abbr title=\"attribute\">attr</abbr>.</p>\n          </div>\n          <div className=\"expand jumbotron\" style={{backgroundColor: \"#000\", color:\"#fff\"}}>\n\n              <h1 className=\"display-3\">Hello, world!</h1>\n              <p className=\"lead\">This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information.</p>\n              <hr className=\"my-4\"/>\n              <p>It uses utility classes for typography and spacing to space content out within the larger container.</p>\n              <p className=\"lead\">\n                <a className=\"btn btn-primary btn-lg\" href=\"#\" role=\"button\">Learn more</a>\n              </p>\n\n          </div>\n          <div className=\"expand\">\n          <h2>Example body text</h2>\n              <p>Nullam quis risus eget <a href=\"#\">urna mollis ornare</a> vel eu leo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nullam id dolor id nibh ultricies vehicula.</p>\n              <p><small>This line of text is meant to be treated as fine print.</small></p>\n              <p>The following is <strong>rendered as bold text</strong>.</p>\n              <p>The following is <em>rendered as italicized text</em>.</p>\n              <p>An abbreviation of the word attribute is <abbr title=\"attribute\">attr</abbr>.</p>\n          </div>\n        </div>\n      </div> \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}